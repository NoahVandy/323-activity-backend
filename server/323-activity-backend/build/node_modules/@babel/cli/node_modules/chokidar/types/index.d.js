// TypeScript Version: 3.0
/// <reference types="node" />
import { EventEmitter } from "events";
/**
 * The object's keys are all the directories (using absolute paths unless the `cwd` option was
 * used), and the values are arrays of the names of the items contained in each directory.
 */

export class FSWatcher extends EventEmitter {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,